{
    "1": {
        "title": "Theme",
        "content": "two main theme:\r\n1. Dark\r\n2. Light",
        "subsections": [
            {
                "title": "light theme",
                "content": "```html\r\n{% extends \"base.html\" %}\r\n\r\n{% block title %}{{ blog.title }} - Blog App{% endblock %}\r\n\r\n{% block content %}\r\n<style>\r\n/* Markdown code language style*/\r\n.code-block {\r\n  position: relative;\r\n  margin: 1.5rem 0;\r\n}\r\n\r\n.language-label {\r\n  position: absolute;\r\n  top: 0;\r\n  right: 0;\r\n  background: #fce7f3;\r\n  color: #9d174d;\r\n  padding: 0.2rem 0.8rem;\r\n  font-size: 0.7rem;\r\n  border-radius: 4px 4px 0 0;\r\n  font-family: Arial, sans-serif;\r\n  text-transform: uppercase;\r\n  font-weight: bold;\r\n  border: 1px solid #c7254e;\r\n  border-radius: 5px;\r\n}\r\n\r\n    \r\n/* ===== Base Layout ===== */\r\n.layout {\r\n  display: flex;\r\n  gap: 1rem;\r\n  margin-top: 1rem;\r\n}\r\n\r\n/* ===== Sidebar ===== */\r\n.sidebar {\r\n  flex: 0 0 250px;\r\n  background: #f9f9f9;\r\n  padding: 1rem;\r\n  border-radius: 8px;\r\n  height: fit-content;\r\n}\r\n\r\n.sidebar h2 {\r\n  font-size: 1.2rem;\r\n  margin-bottom: 0.5rem;\r\n}\r\n\r\n.blog-list {\r\n  display: flex;\r\n  flex-direction: column;\r\n  gap: 0.5rem;\r\n}\r\n\r\n.blog-item.active {\r\n  background: #e9eefc;\r\n  padding: 0.5rem;\r\n  border-radius: 6px;\r\n}\r\n\r\n.blog-title {\r\n  font-weight: bold;\r\n  color: red;\r\n  text-decoration: none;\r\n  word-wrap: break-word;\r\n}\r\n\r\n.blog-title:hover {\r\n  text-decoration: underline;\r\n}\r\n\r\n.toggle-btn {\r\n  background: none;\r\n  border: none;\r\n  cursor: pointer;\r\n  float: right;\r\n}\r\n\r\n.subsections {\r\n  margin-top: 0.5rem;\r\n  display: none;\r\n}\r\n\r\n.subsection-link {\r\n  display: block;\r\n  padding: 0.3rem 0;\r\n  font-size: 0.9rem;\r\n  color: #555;\r\n  text-decoration: none;\r\n  word-wrap: break-word;\r\n}\r\n\r\n.subsection-link:hover {\r\n  text-decoration: underline;\r\n}\r\n\r\n.sidebar-note {\r\n  margin-top: 1rem;\r\n}\r\n\r\n/* ===== Main Content ===== */\r\n.main-content {\r\n  flex: 1;\r\n  padding: 1rem;\r\n  background: #fff;\r\n  border-radius: 6px;\r\n  overflow-x: hidden;\r\n  word-wrap: break-word;\r\n  white-space: normal;\r\n}\r\n\r\n.blog-content h1 {\r\n  font-size: 1.8rem;\r\n  margin-bottom: 0.25rem;\r\n  word-wrap: break-word;\r\n}\r\n\r\n.subsection h2 {\r\n  font-size: 1.4rem;\r\n  margin-top: 0.5rem;\r\n  word-wrap: break-word;\r\n}\r\n\r\n.content-html {\r\n  line-height: 1.6;\r\n  color: #333;\r\n  word-wrap: break-word;\r\n  overflow-wrap: break-word;\r\n  white-space: pre-wrap;\r\n}\r\n\r\n/* Main content spacing fix */\r\n.content-html {\r\n  line-height: 1.6;\r\n  color: #333;\r\n\r\n  /* Remove pre-wrap to let default HTML spacing work normally */\r\n  white-space: normal;\r\n  word-wrap: break-word;\r\n  overflow-wrap: break-word;\r\n}\r\n\r\n/* Reset margins for elements inside content */\r\n.content-html p,\r\n.content-html ul,\r\n.content-html ol,\r\n.content-html li,\r\n.content-html h4,\r\n.content-html h5,\r\n.content-html h6 {\r\n  margin: 0;\r\n  padding: 0;\r\n}\r\n\r\n/* Add small controlled spacing */\r\n/* .content-html p {\r\n  margin-bottom: 0.5rem;\r\n}\r\n\r\n.content-html ul,\r\n.content-html ol {\r\n  margin-left: 1rem;\r\n  margin-bottom: 0.5rem;\r\n} */\r\n\r\n.content-html li {\r\n  margin-bottom: 0.25rem;\r\n}\r\n\r\n.content-html h1 {\r\n  margin-bottom: 0.25rem;\r\n}\r\n\r\n.content-html h2 {\r\n  margin-top: 0.25rem;\r\n}\r\n.content-html h3{\r\n    margin-top: 0.15rem ;\r\n}\r\n\r\n\r\n/* Inline code inside content */\r\n.content-html code {\r\n  background: #f0f0f0;       /* light grey background */\r\n  color: #c7254e;            /* optional text color */\r\n  font-family: Menlo, Monaco, Consolas, \"Courier New\", monospace;\r\n  padding: 0.1rem 0.3rem;\r\n  border-radius: 4px;\r\n  font-size: 0.9rem;\r\n}\r\n\r\n/* Code blocks (full blocks) */\r\n.content-html pre {\r\n  background: #1e1e1e;\r\n  color: #f8f8f2;\r\n  padding: 0.75rem;\r\n  border-radius: 6px;\r\n  font-family: Menlo, Monaco, Consolas, \"Courier New\", monospace;\r\n  font-size: 0.9rem;\r\n  overflow-x: auto;\r\n  white-space: pre-wrap; /* wrap long lines */\r\n}\r\n\r\n\r\n/* ===== Responsive Styles ===== */\r\n@media (max-width: 768px) {\r\n  .layout {\r\n    flex-direction: column;\r\n  }\r\n\r\n  .sidebar {\r\n    flex: 1;\r\n    order: 2;\r\n    padding: 0.75rem;\r\n  }\r\n\r\n  .main-content {\r\n    order: 1;\r\n    padding: 0.5rem;\r\n  }\r\n\r\n  .blog-content h1 {\r\n    font-size: 1.5rem;\r\n  }\r\n  .blog-content h2{\r\n    font-size: 1.2rem;\r\n  }\r\n    .blog-content h3{\r\n    font-size: 1.1rem;\r\n  }\r\n\r\n  .subsection h2 {\r\n    font-size: 0.9rem;\r\n  }\r\n\r\n  .blog-title,\r\n  .subsection-link {\r\n    font-size: 0.85rem;\r\n  }\r\n\r\n  .content-html {\r\n    font-size: 0.85rem;\r\n  }\r\n}\r\n\r\n@media (max-width: 480px) {\r\n  .sidebar {\r\n    padding: 0.5rem;\r\n  }\r\n\r\n  .main-content {\r\n    padding: 0.5rem;\r\n  }\r\n\r\n  .blog-title {\r\n    font-size: 0.75rem;\r\n  }\r\n\r\n  .content-html {\r\n    font-size: 0.75rem;\r\n  }\r\n\r\n  .content-html pre,\r\n  .content-html code {\r\n    font-size: 0.25rem;\r\n  }\r\n}\r\n</style>\r\n\r\n<div class=\"container\">\r\n  <div class=\"layout\">\r\n    <!-- Sidebar -->\r\n    <aside class=\"sidebar\">\r\n      <h2>Blog Posts</h2>\r\n      <div class=\"blog-list\">\r\n        <div class=\"blog-item active\">\r\n          <a href=\"{{ url_for('blog_detail', blog_id=blog_id) }}\" class=\"blog-title\">\r\n            {{ blog.title }}\r\n          </a>\r\n          {% if blog.subsections %}\r\n          <button class=\"toggle-btn\" onclick=\"toggleSubsections('{{ blog_id }}')\">\r\n            <i id=\"icon-{{ blog_id }}\" class=\"fas fa-chevron-down\"></i>\r\n          </button>\r\n          <div id=\"subsections-{{ blog_id }}\" class=\"subsections\">\r\n            {% for subsection in blog.subsections %}\r\n            <a href=\"#subsection-{{ loop.index0 }}\" class=\"subsection-link\">\r\n              {{ subsection.title }}\r\n            </a>\r\n            {% endfor %}\r\n          </div>\r\n          {% endif %}\r\n        </div>\r\n        <div class=\"sidebar-note\">\r\n          <p><a href=\"{{ url_for('index') }}\">\u2190 Back to all blogs</a></p>\r\n        </div>\r\n      </div>\r\n    </aside>\r\n\r\n    <!-- Main Content -->\r\n    <main class=\"main-content\">\r\n      <article class=\"blog-content\">\r\n        <h1>{{ blog.title }}</h1>\r\n        <div class=\"content-html markdown-body\">\r\n          {{ blog.content_html | safe }}\r\n        </div>\r\n\r\n        {% for subsection in blog.subsections %}\r\n        <section id=\"subsection-{{ loop.index0 }}\" class=\"subsection\">\r\n          <h2>{{ subsection.title }}</h2>\r\n          <div class=\"content-html markdown-body\">\r\n            {{ subsection.content_html | safe }}\r\n          </div>\r\n        </section>\r\n        {% endfor %}\r\n      </article>\r\n    </main>\r\n  </div>\r\n</div>\r\n\r\n<script>\r\nfunction toggleSubsections(id) {\r\n  const container = document.getElementById(`subsections-${id}`);\r\n  const icon = document.getElementById(`icon-${id}`);\r\n  container.style.display = container.style.display === 'block' ? 'none' : 'block';\r\n  icon.classList.toggle('fa-chevron-down');\r\n  icon.classList.toggle('fa-chevron-up');\r\n}\r\n\r\n// Add this to your existing script\r\ndocument.addEventListener('DOMContentLoaded', function() {\r\n  // Process all code blocks in the content\r\n  document.querySelectorAll('.content-html pre code').forEach(function(codeBlock) {\r\n    const pre = codeBlock.parentElement;\r\n    \r\n    // Check if code block has a language class\r\n    const languageMatch = codeBlock.className.match(/language-(\\w+)/);\r\n    if (languageMatch) {\r\n      const language = languageMatch[1];\r\n      \r\n      // Create language label\r\n      const label = document.createElement('div');\r\n      label.className = 'language-label';\r\n      label.textContent = language.toUpperCase();\r\n      \r\n      // Wrap the pre in a container\r\n      const container = document.createElement('div');\r\n      container.className = 'code-block';\r\n      pre.parentNode.insertBefore(container, pre);\r\n      container.appendChild(label);\r\n      container.appendChild(pre);\r\n    }\r\n  });\r\n});\r\n</script>\r\n{% endblock %}\r\n```"
            },
            {
                "title": "Dark",
                "content": "```html\r\n{% extends \"base.html\" %}\r\n\r\n{% block title %}{{ blog.title }} - Blog App{% endblock %}\r\n\r\n{% block content %}\r\n<style>\r\n/* GitHub README Dark Theme exact styling */\r\n:root {\r\n  --color-fg-default: #FFFFFF;\r\n  --color-fg-muted: #8B949E;\r\n  --color-fg-subtle: #6E7681;\r\n  --color-canvas-default: #0D1117;\r\n  --color-canvas-subtle: #161B22;\r\n  --color-border-default: #30363D;\r\n  --color-border-muted: #21262D;\r\n  --color-neutral-muted: rgba(110, 118, 129, 0.4);\r\n  --color-accent-fg: #58A6FF;\r\n  --color-accent-emphasis: #1F6FEB;\r\n  --color-danger-fg: #F85149;\r\n  --color-success-fg: #3FB950;\r\n  --color-attention-fg: #D29922;\r\n  --color-done-fg: #A371F7;\r\n}\r\n\r\nbody {\r\n  font-family: -apple-system, BlinkMacSystemFont, \"Segoe UI\", \"Noto Sans\", Helvetica, Arial, sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\";\r\n  font-size: 14px;\r\n  line-height: 1.5;\r\n  color: var(--color-fg-default);\r\n  background-color: var(--color-canvas-default);\r\n  margin: 0;\r\n  padding: 0;\r\n}\r\n\r\n.container {\r\n  max-width: 1280px;\r\n  margin: 0 auto;\r\n  padding: 32px;\r\n}\r\n\r\n/* ===== Base Layout ===== */\r\n.layout {\r\n  display: flex;\r\n  gap: 32px;\r\n  margin-top: 0;\r\n}\r\n\r\n/* ===== Sidebar ===== */\r\n.sidebar {\r\n  flex: 0 0 256px;\r\n  background: var(--color-canvas-default);\r\n  padding: 0;\r\n  border: 1px solid var(--color-border-default);\r\n  border-radius: 6px;\r\n  height: fit-content;\r\n}\r\n\r\n.sidebar h2 {\r\n  font-size: 14px;\r\n  font-weight: 600;\r\n  margin: 0;\r\n  padding: 16px;\r\n  background: var(--color-canvas-subtle);\r\n  border-bottom: 1px solid var(--color-border-default);\r\n  color: var(--color-fg-default);\r\n}\r\n\r\n.blog-list {\r\n  padding: 8px;\r\n  display: flex;\r\n  flex-direction: column;\r\n  gap: 4px;\r\n}\r\n\r\n.blog-item.active {\r\n  background: var(--color-canvas-subtle);\r\n  padding: 8px 12px;\r\n  border-radius: 6px;\r\n  border: 1px solid var(--color-border-default);\r\n}\r\n\r\n.blog-title {\r\n  font-weight: 600;\r\n  color: var(--color-accent-fg);\r\n  text-decoration: none;\r\n  word-wrap: break-word;\r\n  display: block;\r\n  font-size: 14px;\r\n  line-height: 1.25;\r\n}\r\n\r\n.blog-title:hover {\r\n  text-decoration: underline;\r\n  color: var(--color-accent-fg);\r\n}\r\n\r\n.toggle-btn {\r\n  background: none;\r\n  border: none;\r\n  cursor: pointer;\r\n  float: right;\r\n  color: var(--color-fg-muted);\r\n  padding: 0;\r\n  margin: -2px 0 0 0;\r\n}\r\n\r\n.subsections {\r\n  margin-top: 8px;\r\n  display: none;\r\n}\r\n\r\n.subsection-link {\r\n  display: block;\r\n  padding: 4px 0 4px 12px;\r\n  font-size: 12px;\r\n  color: var(--color-fg-default);\r\n  text-decoration: none;\r\n  word-wrap: break-word;\r\n  border-left: 2px solid var(--color-border-default);\r\n  margin-left: 4px;\r\n}\r\n\r\n.subsection-link:hover {\r\n  color: var(--color-accent-fg);\r\n  text-decoration: underline;\r\n}\r\n\r\n.sidebar-note {\r\n  margin-top: 16px;\r\n  padding: 16px;\r\n  border-top: 1px solid var(--color-border-default);\r\n  background: var(--color-canvas-subtle);\r\n}\r\n\r\n.sidebar-note a {\r\n  color: var(--color-accent-fg);\r\n  text-decoration: none;\r\n  font-size: 12px;\r\n  font-weight: 600;\r\n}\r\n\r\n.sidebar-note a:hover {\r\n  text-decoration: underline;\r\n}\r\n\r\n/* ===== Main Content ===== */\r\n.main-content {\r\n  flex: 1;\r\n  padding: 0;\r\n  background: var(--color-canvas-default);\r\n  overflow-x: hidden;\r\n  word-wrap: break-word;\r\n}\r\n\r\n.blog-content {\r\n  max-width: none;\r\n}\r\n\r\n.blog-content h1 {\r\n  font-size: 32px;\r\n  font-weight: 600;\r\n  margin: 0 0 16px 0;\r\n  padding: 0 0 8px 0;\r\n  border-bottom: 1px solid var(--color-border-default);\r\n  word-wrap: break-word;\r\n  color: var(--color-fg-default);\r\n  line-height: 1.25;\r\n}\r\n\r\n.subsection h2 {\r\n  font-size: 24px;\r\n  font-weight: 600;\r\n  margin: 32px 0 16px 0;\r\n  padding: 0 0 8px 0;\r\n  border-bottom: 1px solid var(--color-border-default);\r\n  word-wrap: break-word;\r\n  color: var(--color-fg-default);\r\n  line-height: 1.25;\r\n}\r\n\r\n.content-html {\r\n  line-height: 1.5;\r\n  color: var(--color-fg-default);\r\n  word-wrap: break-word;\r\n  overflow-wrap: break-word;\r\n  font-size: 14px;\r\n}\r\n\r\n/* GitHub README Dark Theme exact content styling */\r\n.content-html p {\r\n  margin: 0 0 16px 0;\r\n  padding: 0;\r\n  color: var(--color-fg-default);\r\n}\r\n\r\n.content-html ul, \r\n.content-html ol {\r\n  margin: 0 0 16px 0;\r\n  padding: 0 0 0 32px;\r\n  color: var(--color-fg-default);\r\n}\r\n\r\n.content-html li {\r\n  margin: 4px 0;\r\n  padding: 0;\r\n  color: var(--color-fg-default);\r\n}\r\n\r\n.content-html li > p {\r\n  margin: 0;\r\n  color: var(--color-fg-default);\r\n}\r\n\r\n.content-html h1 {\r\n  font-size: 32px;\r\n  font-weight: 600;\r\n  margin: 24px 0 16px 0;\r\n  padding: 0 0 8px 0;\r\n  border-bottom: 1px solid var(--color-border-default);\r\n  color: var(--color-fg-default);\r\n}\r\n\r\n.content-html h2 {\r\n  font-size: 24px;\r\n  font-weight: 600;\r\n  margin: 24px 0 16px 0;\r\n  padding: 0 0 8px 0;\r\n  border-bottom: 1px solid var(--color-border-default);\r\n  color: var(--color-fg-default);\r\n}\r\n\r\n.content-html h3 {\r\n  font-size: 20px;\r\n  font-weight: 600;\r\n  margin: 24px 0 16px 0;\r\n  padding: 0;\r\n  color: var(--color-fg-default);\r\n}\r\n\r\n.content-html h4 {\r\n  font-size: 16px;\r\n  font-weight: 600;\r\n  margin: 16px 0 8px 0;\r\n  padding: 0;\r\n  color: var(--color-fg-default);\r\n}\r\n\r\n.content-html h5 {\r\n  font-size: 14px;\r\n  font-weight: 600;\r\n  margin: 16px 0 8px 0;\r\n  padding: 0;\r\n  color: var(--color-fg-default);\r\n}\r\n\r\n.content-html h6 {\r\n  font-size: 14px;\r\n  font-weight: 600;\r\n  margin: 16px 0 8px 0;\r\n  padding: 0;\r\n  color: var(--color-fg-muted);\r\n}\r\n\r\n.content-html blockquote {\r\n  margin: 16px 0;\r\n  padding: 0 16px;\r\n  color: var(--color-fg-muted);\r\n  border-left: 4px solid var(--color-border-default);\r\n  font-style: italic;\r\n}\r\n\r\n.content-html table {\r\n  border-spacing: 0;\r\n  border-collapse: collapse;\r\n  display: block;\r\n  width: max-content;\r\n  max-width: 100%;\r\n  overflow: auto;\r\n  margin: 16px 0;\r\n}\r\n\r\n.content-html table th {\r\n  font-weight: 600;\r\n  padding: 6px 13px;\r\n  border: 1px solid var(--color-border-default);\r\n  background: var(--color-canvas-subtle);\r\n  color: var(--color-fg-default);\r\n}\r\n\r\n.content-html table td {\r\n  padding: 6px 13px;\r\n  border: 1px solid var(--color-border-default);\r\n  color: var(--color-fg-default);\r\n}\r\n\r\n.content-html table tr {\r\n  background-color: var(--color-canvas-default);\r\n  border-top: 1px solid var(--color-border-muted);\r\n}\r\n\r\n.content-html table tr:nth-child(2n) {\r\n  background-color: var(--color-canvas-subtle);\r\n}\r\n\r\n/* Inline code styling - GitHub Dark exact */\r\n.content-html code:not(pre code) {\r\n  background: var(--color-neutral-muted);\r\n  color: var(--color-fg-default);\r\n  font-family: ui-monospace, SFMono-Regular, \"SF Mono\", Menlo, Consolas, \"Liberation Mono\", monospace;\r\n  padding: 2px 4px;\r\n  border-radius: 6px;\r\n  font-size: 85%;\r\n  margin: 0;\r\n}\r\n\r\n/* Code blocks styling - GitHub Dark exact */\r\n.content-html pre {\r\n  background: var(--color-canvas-subtle);\r\n  color: var(--color-fg-default);\r\n  padding: 16px;\r\n  border-radius: 6px;\r\n  font-family: ui-monospace, SFMono-Regular, \"SF Mono\", Menlo, Consolas, \"Liberation Mono\", monospace;\r\n  font-size: 13px;\r\n  overflow-x: auto;\r\n  line-height: 1.45;\r\n  margin: 16px 0;\r\n  border: 1px solid var(--color-border-default);\r\n}\r\n\r\n.content-html pre code {\r\n  background: none;\r\n  padding: 0;\r\n  border-radius: 0;\r\n  font-size: 100%;\r\n  color: var(--color-fg-default);\r\n}\r\n\r\n/* Code block with language label */\r\n.code-block {\r\n  position: relative;\r\n  margin: 16px 0;\r\n}\r\n\r\n.language-label {\r\n  position: absolute;\r\n  top: 8px;\r\n  right: 8px;\r\n  background: rgba(48, 54, 61, 0.9);\r\n  color: var(--color-fg-muted);\r\n  padding: 2px 8px;\r\n  font-size: 11px;\r\n  border-radius: 6px;\r\n  font-family: ui-monospace, SFMono-Regular, \"SF Mono\", Menlo, Consolas, \"Liberation Mono\", monospace;\r\n  text-transform: uppercase;\r\n  font-weight: 600;\r\n  border: 1px solid var(--color-border-default);\r\n  letter-spacing: 0.5px;\r\n  backdrop-filter: blur(4px);\r\n}\r\n\r\n/* Links - GitHub Dark exact */\r\n.content-html a {\r\n  color: var(--color-accent-fg);\r\n  text-decoration: none;\r\n}\r\n\r\n.content-html a:hover {\r\n  text-decoration: underline;\r\n  color: var(--color-accent-fg);\r\n}\r\n\r\n/* GitHub Dark style horizontal rule */\r\n.content-html hr {\r\n  height: 1px;\r\n  padding: 0;\r\n  margin: 24px 0;\r\n  background-color: var(--color-border-default);\r\n  border: 0;\r\n}\r\n\r\n/* GitHub Dark style task lists */\r\n.content-html .task-list-item {\r\n  list-style-type: none;\r\n}\r\n\r\n.content-html .task-list-item-checkbox {\r\n  margin: 0 8px 0 -20px;\r\n  vertical-align: middle;\r\n}\r\n\r\n/* GitHub Dark style images */\r\n.content-html img {\r\n  max-width: 100%;\r\n  box-sizing: border-box;\r\n  background-color: var(--color-canvas-default);\r\n}\r\n\r\n/* Force all text to be white */\r\n* {\r\n  color: var(--color-fg-default);\r\n}\r\n\r\n/* Specific overrides for muted text */\r\n.sidebar h2,\r\n.content-html h6,\r\n.content-html blockquote,\r\n.language-label {\r\n  color: var(--color-fg-muted) !important;\r\n}\r\n\r\n/* Links should stay blue */\r\n.blog-title,\r\n.sidebar-note a,\r\n.content-html a {\r\n  color: var(--color-accent-fg) !important;\r\n}\r\n\r\n/* ===== Responsive Styles ===== */\r\n@media (max-width: 768px) {\r\n  .container {\r\n    padding: 16px;\r\n  }\r\n  \r\n  .layout {\r\n    flex-direction: column;\r\n    gap: 16px;\r\n  }\r\n\r\n  .sidebar {\r\n    flex: 1;\r\n    order: 2;\r\n  }\r\n\r\n  .main-content {\r\n    order: 1;\r\n  }\r\n\r\n  .blog-content h1 {\r\n    font-size: 24px;\r\n  }\r\n\r\n  .blog-content h2 {\r\n    font-size: 20px;\r\n  }\r\n  \r\n  .blog-content h3 {\r\n    font-size: 18px;\r\n  }\r\n\r\n  .subsection h2 {\r\n    font-size: 20px;\r\n  }\r\n}\r\n\r\n@media (max-width: 480px) {\r\n  .container {\r\n    padding: 8px;\r\n  }\r\n\r\n  .blog-content h1 {\r\n    font-size: 20px;\r\n  }\r\n\r\n  .blog-content h2 {\r\n    font-size: 18px;\r\n  }\r\n  \r\n  .content-html {\r\n    font-size: 13px;\r\n  }\r\n\r\n  .content-html pre {\r\n    font-size: 12px;\r\n    padding: 12px;\r\n  }\r\n}\r\n</style>\r\n\r\n<div class=\"container\">\r\n  <div class=\"layout\">\r\n    <!-- Sidebar -->\r\n    <aside class=\"sidebar\">\r\n      <h2>Blog Posts</h2>\r\n      <div class=\"blog-list\">\r\n        <div class=\"blog-item active\">\r\n          <a href=\"{{ url_for('blog_detail', blog_id=blog_id) }}\" class=\"blog-title\">\r\n            {{ blog.title }}\r\n          </a>\r\n          {% if blog.subsections %}\r\n          <button class=\"toggle-btn\" onclick=\"toggleSubsections('{{ blog_id }}')\">\r\n            <i id=\"icon-{{ blog_id }}\" class=\"fas fa-chevron-down\"></i>\r\n          </button>\r\n          <div id=\"subsections-{{ blog_id }}\" class=\"subsections\">\r\n            {% for subsection in blog.subsections %}\r\n            <a href=\"#subsection-{{ loop.index0 }}\" class=\"subsection-link\">\r\n              {{ subsection.title }}\r\n            </a>\r\n            {% endfor %}\r\n          </div>\r\n          {% endif %}\r\n        </div>\r\n        <div class=\"sidebar-note\">\r\n          <p><a href=\"{{ url_for('index') }}\">\u2190 Back to all blogs</a></p>\r\n        </div>\r\n      </div>\r\n    </aside>\r\n\r\n    <!-- Main Content -->\r\n    <main class=\"main-content\">\r\n      <article class=\"blog-content\">\r\n        <h1>{{ blog.title }}</h1>\r\n        <div class=\"content-html\">\r\n          {{ blog.content_html | safe }}\r\n        </div>\r\n\r\n        {% for subsection in blog.subsections %}\r\n        <section id=\"subsection-{{ loop.index0 }}\" class=\"subsection\">\r\n          <h2>{{ subsection.title }}</h2>\r\n          <div class=\"content-html\">\r\n            {{ subsection.content_html | safe }}\r\n          </div>\r\n        </section>\r\n        {% endfor %}\r\n      </article>\r\n    </main>\r\n  </div>\r\n</div>\r\n\r\n<script>\r\nfunction toggleSubsections(id) {\r\n  const container = document.getElementById(`subsections-${id}`);\r\n  const icon = document.getElementById(`icon-${id}`);\r\n  container.style.display = container.style.display === 'block' ? 'none' : 'block';\r\n  icon.classList.toggle('fa-chevron-down');\r\n  icon.classList.toggle('fa-chevron-up');\r\n}\r\n\r\n// Add this to your existing script\r\ndocument.addEventListener('DOMContentLoaded', function() {\r\n  // Process all code blocks in the content\r\n  document.querySelectorAll('.content-html pre code').forEach(function(codeBlock) {\r\n    const pre = codeBlock.parentElement;\r\n    \r\n    // Check if code block has a language class\r\n    const languageMatch = codeBlock.className.match(/language-(\\w+)/);\r\n    if (languageMatch) {\r\n      const language = languageMatch[1];\r\n      \r\n      // Create language label\r\n      const label = document.createElement('div');\r\n      label.className = 'language-label';\r\n      label.textContent = language.toUpperCase();\r\n      \r\n      // Wrap the pre in a container\r\n      const container = document.createElement('div');\r\n      container.className = 'code-block';\r\n      pre.parentNode.insertBefore(container, pre);\r\n      container.appendChild(label);\r\n      container.appendChild(pre);\r\n    }\r\n  });\r\n});\r\n</script>\r\n{% endblock %}\r\n```"
            }
        ]
    },
    "2": {
        "title": "React",
        "content": "React Core Concept",
        "subsections": [
            {
                "title": "React-Navbar-Pricing-Card-Recharts",
                "content": "## React-vite \r\ncommand line to create project\r\n```bash\r\nnpm create vite@latest my-vue-app -- --template react\r\n```\r\n## Install tailwind using npm\r\n```bash\r\nnpm install tailwindcss @tailwindcss/vite\r\n```\r\n*Configure the Vite plugin (vite.config.js)\r\n```js\r\nimport { defineConfig } from 'vite'\r\nimport tailwindcss from '@tailwindcss/vite'\r\n\r\nexport default defineConfig({\r\n  plugins: [\r\n    tailwindcss(),\r\n  ],\r\n})\r\n```\r\n*Import Tailwind CSS\r\n```css\r\n@import \"tailwindcss\";\r\n```\r\n## DaisyUI use\r\n1. Install daisyUI as a Node package:\r\n```bash\r\nnpm i -D daisyui@latest\r\n```\r\n2. Add daisyUI to app.css:\r\n```bash\r\n@plugin \"daisyui\";\r\n```\r\n## lucide Icons\r\n1. Installation the package for react\r\n```bash\r\nnpm install lucide-react\r\n```\r\n2. Using Lucide:\r\n```jsx\r\nimport { Airplay } from 'lucide-react';\r\n\r\nconst App = () => {\r\n  return (\r\n    <Airplay />\r\n  );\r\n};\r\n\r\nexport default App;\r\n```\r\n\r\n## Recharts\r\n1. Install recharts using npm\r\n```bash\r\nnpm install recharts\r\n```\r\n\r\n## Axios\r\nAxios is a promise-based HTTP client for making requests to servers, commonly used in JavaScript and Node.js applications.\r\n**Axios** is a **promise-based HTTP client** for making requests to servers, commonly used in **JavaScript** and **Node.js** applications.\r\n\r\n### Key Features:\r\n\r\n* **Supports modern browsers and Node.js**\r\n* **Promise-based** (works great with `async/await`)\r\n* **Automatic JSON data transformation**\r\n* **Supports request and response interception**\r\n* **Handles request cancellation**\r\n* **Supports upload/download progress tracking**\r\n* **Built-in protection against XSRF (Cross-Site Request Forgery)**\r\n\r\n### Common Use Cases:\r\n\r\n1. **Fetching data from APIs**\r\n2. **Submitting form data to a server**\r\n3. **Interacting with backend services like REST APIs**\r\n\r\n\r\n### Basic Example:\r\n\r\n```javascript\r\nimport axios from 'axios';\r\n\r\naxios.get('https://api.example.com/users')\r\n  .then(response => {\r\n    console.log(response.data);\r\n  })\r\n  .catch(error => {\r\n    console.error(error);\r\n  });\r\n```\r\n\r\nOr using `async/await`:\r\n\r\n```javascript\r\nasync function getUsers() {\r\n  try {\r\n    const response = await axios.get('https://api.example.com/users');\r\n    console.log(response.data);\r\n  } catch (error) {\r\n    console.error(error);\r\n  }\r\n}\r\n```\r\n\r\n\r\n### Installation:\r\n\r\n```bash\r\nnpm install axios\r\n```\r\n\r\n# React-loader-spinner\r\n```bash\r\nnpm install react-loader-spinner --save\r\n```\r\nusing:\r\n```jsx\r\nimport { Audio } from 'react-loader-spinner'\r\n<Audio\r\n  height=\"80\"\r\n  width=\"80\"\r\n  radius=\"9\"\r\n  color=\"green\"\r\n  ariaLabel=\"three-dots-loading\"\r\n  wrapperStyle\r\n  wrapperClass\r\n/>\r\n```\r\n\r\n## React awesome component links-\r\n1. [awesome-react-components](https://github.com/brillout/awesome-react-components)\r\n"
            },
            {
                "title": "React-Core-Concept-Lift-up-State",
                "content": "1. What is a Promise?\r\n\r\nA Promise is like a promise in real life. It\u2019s a way to say, \"I\u2019ll do something, and when I\u2019m done, I\u2019ll give you the result.\"\r\n\r\nIn JavaScript, it means you can make a request (like asking for some data) and instead of waiting for it, you continue doing other things. When the request is done, the promise will either:\r\n\r\nResolve (success, gives the data you wanted).\r\n\r\nReject (failure, gives you an error).\r\n\r\n2. What is Asynchronous?\r\n\r\nWhen something is asynchronous, it means the program doesn't wait for it to finish before moving on to the next thing. It can do other tasks while waiting for the first task to finish.\r\n\r\nFor example:\r\n\r\nIf you're cooking and waiting for the oven, you can do other things like chopping vegetables. The oven doesn\u2019t stop you from doing other tasks.\r\n\r\n3. What is a Response Object?\r\n\r\nA Response object is the result you get after making a request, like asking a waiter for food. It's not the food itself yet, but it\u2019s the information about the food, such as:\r\n\r\nDid the request succeed?\r\n\r\nWhat data is inside the response?\r\n\r\nIt contains everything related to the response, such as status codes (like success or error) and the actual data you wanted.\r\n\r\n4. Why Need to Convert to JSON?\r\n\r\nWhen you get a response from a request (like fetching countries\u2019 data), the data is often in a format called JSON (JavaScript Object Notation), which looks like plain text. But to work with this data in JavaScript (like displaying it), you need to convert it to a usable JavaScript object.\r\n\r\nIt\u2019s like receiving a letter written in a code. To understand it, you need to decode it into a language you understand.\r\n\r\n5. What is an Endpoint?\r\n\r\nAn endpoint is simply the URL (or web address) where your request goes to get the data. It\u2019s like the door or path that leads to the information you\u2019re asking for.\r\n\r\nIn your example:\r\n\r\nThe endpoint is https://openapi.programming-hero.com/api/all, where you ask for all countries' data.\r\n\r\nExample in Simple Terms:\r\n\r\nWhen you use fetch(), it\u2019s like saying:\r\n\r\n\"Hey, I want some data from this URL. It\u2019s going to take some time, but I don\u2019t want to wait here doing nothing. I\u2019ll continue with my other work, and when the data is ready, I\u2019ll use it.\"\r\n\r\nSo:\r\n\r\nfetch() sends a request to a URL (endpoint) to get data.\r\n\r\nIt returns a Promise that will either give you the data when ready or an error if something goes wrong.\r\n\r\nOnce the data comes, it\u2019s in JSON format, so you need to convert it to a JavaScript object to work with it.\r\n\r\n\r\nIn the code you shared, where you pass `fetchCountriesApi` into the `Countries` component like this:\r\n\r\n```jsx\r\n<Countries fetchCountriesApi={fetchCountriesApi} />\r\n```\r\n\r\nThis is called **passing props** in React. Let me explain it in simple terms:\r\n\r\n### What is **props**?\r\n\r\n* **Props** are like **parameters** or **attributes** that you pass into a React component. These values can be anything \u2014 a number, string, function, or even an object.\r\n* The component receives these values and can use them inside the component.\r\n\r\n### In Your Case:\r\n\r\n* You're passing `fetchCountriesApi` (which is a **Promise** from the `fetch` request) as a **prop** to the `Countries` component.\r\n* Inside the `Countries` component, you can access it using `{fetchCountriesApi}`, which will be available as a **prop**.\r\n\r\nHere's how it works:\r\n\r\n* The `Countries` component is receiving `fetchCountriesApi` as a **prop**.\r\n* This is done by writing `{fetchCountriesApi}` inside the `Countries` function and using it wherever you need within that component.\r\n\r\n### Why Use Props?\r\n\r\nProps allow you to **share data or functions** between components. In your example, you're passing the `fetchCountriesApi` function from the parent component (the `App` component) to the child component (`Countries`). The child component can use it to fetch the data.\r\n\r\n### Here's a Breakdown of What You Did:\r\n\r\n1. **Parent Component (`App`)**: You declared `fetchCountriesApi` and are passing it to the `Countries` component.\r\n\r\n   ```jsx\r\n   <Countries fetchCountriesApi={fetchCountriesApi} />\r\n   ```\r\n\r\n   This is **passing** the `fetchCountriesApi` as a **prop**.\r\n\r\n2. **Child Component (`Countries`)**: Inside `Countries`, you can now use `fetchCountriesApi` as a prop.\r\n\r\n   ```jsx\r\n   const Countries = ({ fetchCountriesApi }) => {\r\n     return (\r\n       <div>\r\n         <h3>This is the info page of Countries.</h3>\r\n       </div>\r\n     );\r\n   }\r\n   ```\r\n\r\nIn this code, `fetchCountriesApi` is just a **prop** that the `Countries` component will receive and can use later (for example, to fetch the data and display it).\r\n\r\n\r\n* The `use()` function is likely a **custom hook** designed to manage fetching data (like `fetchCountriesApi`).\r\n* We use custom hooks to **reuse logic**, **manage state**, and make components cleaner and easier to manage.\r\n\r\n\r\nIn your code:\r\n\r\n```jsx\r\n{\r\n  countries.map(country => (\r\n    <Country country={country}></Country>\r\n  ))\r\n}\r\n```\r\n\r\n### What is **`country={country}`**?\r\n\r\n* **`country={country}`** is **passing a prop** named `country` to the `Country` component, where `country` is the current item from the `countries` array.\r\n\r\nLet me explain this step by step:\r\n\r\n### 1. **`countries.map()`**\r\n\r\n* You are looping through the `countries` array using `map()`.\r\n* For each item in the `countries` array, `map()` runs the function you provided and passes each `country` (an individual object representing a country) to the function.\r\n\r\nFor example, if `countries` is an array of country objects:\r\n\r\n```javascript\r\nconst countries = [\r\n  { name: \"USA\", population: 331000000 },\r\n  { name: \"India\", population: 1380004385 },\r\n  { name: \"Germany\", population: 83166711 }\r\n];\r\n```\r\n\r\nEach `country` would represent one of these objects during each loop iteration.\r\n\r\n### 2. **`country={country}`**\r\n\r\n* In this line, you're **passing each country object** as a prop to the `Country` component.\r\n* `country={country}` means you're taking the current `country` object and giving it the name `country` in the `Country` component.\r\n\r\n### Why is it necessary?\r\n\r\nYou want to send the data (e.g., name, population) about each country to the `Country` component so that it can display information about each individual country. By passing the `country` object to `Country`, the `Country` component can use it and display the relevant details (like the country's name, population, etc.).\r\n\r\n### How the `Country` component might use it:\r\n\r\nInside the `Country` component, you would access the passed `country` prop to display the country data:\r\n\r\n```jsx\r\nconst Country = ({ country }) => {\r\n  return (\r\n    <div>\r\n      <h4>{country.name}</h4>\r\n      <p>Population: {country.population}</p>\r\n    </div>\r\n  );\r\n};\r\n```\r\n\r\n### Summary:\r\n\r\n* **`country={country}`** is passing the current country object to the `Country` component as a **prop**.\r\n* The `Country` component uses this **prop** to display information about each country.\r\n* It\u2019s necessary to pass the data to the child component (in this case, `Country`) so that it knows what to render.\r\n\r\n\r\nSure! Let\u2019s explain **passing props** with a simple **story example**.\r\n\r\n### Story Example: **A School and Students**\r\n\r\n#### Characters:\r\n\r\n* **Principal**: The head of the school.\r\n* **Teacher**: The person who teaches students.\r\n* **Student**: The child learning in school.\r\n\r\n---\r\n\r\n**Story Setup:**\r\n\r\nIn a school, the **Principal** wants to tell the **Teacher** the names of all the **Students** in the school so the **Teacher** can greet each one and say something nice about them. The **Principal** gives a list of all the students' names to the **Teacher**.\r\n\r\n**Now, let\u2019s relate this story to React concepts:**\r\n\r\n1. **Principal** = The **Parent Component** (like `App`).\r\n2. **Teacher** = The **Child Component** (like `Country`).\r\n3. **Student** = The **Data** (like each `country` in the array).\r\n\r\n#### The Code Story:\r\n\r\nThe **Principal** (Parent) gives the list of **Students** (Countries) to the **Teacher** (Child Component), so that the **Teacher** can greet each student.\r\n\r\n1. **Principal gives the list of students (data) to Teacher:**\r\n\r\n   ```jsx\r\n   <Teacher students={studentsList} />\r\n   ```\r\n\r\n2. **Teacher receives the list (prop) and greets each student:**\r\n\r\n   ```jsx\r\n   const Teacher = ({ students }) => {\r\n     return (\r\n       <div>\r\n         <h3>Teacher's Greetings:</h3>\r\n         {\r\n           students.map(student => (\r\n             <p>Hello, {student.name}!</p>  // The Teacher greets each Student.\r\n           ))\r\n         }\r\n       </div>\r\n     );\r\n   };\r\n   ```\r\n\r\n#### Explanation:\r\n\r\n* The **Principal** is the parent, and it has a **list of students** (`studentsList`).\r\n* The **Principal** gives the list to the **Teacher** via **props** (`students={studentsList}`).\r\n* The **Teacher** (Child component) receives the list of students and **greets each student** by looping through the list with `.map()`.\r\n\r\n#### Example with Country Data:\r\n\r\nImagine the **Principal** has a list of countries, and they want to pass the information to the **Teacher** (which is the **Country component**).\r\n\r\n```jsx\r\n// Principal (Parent)\r\nconst countries = [\r\n  { name: \"USA\", population: \"331 million\" },\r\n  { name: \"India\", population: \"1.38 billion\" },\r\n  { name: \"Germany\", population: \"83 million\" }\r\n];\r\n\r\n// Passing the list of countries to Teacher\r\n<Teacher countries={countries} />\r\n```\r\n\r\n```jsx\r\n// Teacher (Child)\r\nconst Teacher = ({ countries }) => {\r\n  return (\r\n    <div>\r\n      <h3>Countries Info:</h3>\r\n      {\r\n        countries.map(country => (\r\n          <div key={country.name}>\r\n            <h4>{country.name}</h4>\r\n            <p>Population: {country.population}</p>\r\n          </div>\r\n        ))\r\n      }\r\n    </div>\r\n  );\r\n};\r\n```\r\n\r\nIn this example:\r\n\r\n* The **Principal** passes the list of **countries** to the **Teacher** using props (`countries={countries}`).\r\n* The **Teacher** (Child component) then **displays the names and population** of each country in a list.\r\n\r\n### Summary in Story Terms:\r\n\r\n* **Props** are like **giving a list** to someone (Parent to Child).\r\n* The **Teacher (Child)** can only **greet** or **display** the students (or countries) because the **Principal (Parent)** gave them the data.\r\n* The **Teacher (Child)** uses that data to do their job: showing a message for each student or country.\r\n\r\nIn short: **Props** are the **list of students (data)** passed from the **Principal (Parent)** to the **Teacher (Child)** so the Teacher can greet or display each student.\r\n\r\n\r\nTo Summarize:\r\n\r\nStep 1: Data Definition in Parent.\r\n\r\nStep 2: Passing Props from Parent to Child.\r\n\r\nStep 3: Receiving Props in Child.\r\n\r\nStep 4: Using Props inside Child to perform tasks.\r\n\r\nThis is the basic flow of data flow in React from Parent to Child components.\r\n\r\n\r\nThe steps for this specific code are:\r\n\r\n1. **Mapping** (Iterating over the `countries` array).\r\n2. **Passing Data** (Sending each `country` object to the `Country` component as a prop).\r\n3. **Rendering** (The `Country` component uses the `country` prop to display details).\r\n\r\nIn short, it's: **Mapping, Passing, and Rendering**.\r\n\r\n\r\nLet's break down the concepts of **state**, **`useState`**, and **handlers** in the context of React:\r\n\r\n### 1. **What is State in React?**\r\n\r\n* **State** in React refers to **data** or **variables** that can change over time and influence the behavior or appearance of a component.\r\n* When **state** changes, the component **re-renders** to reflect the updated state.\r\n\r\nIn simple terms, state is like the **memory** of the component, storing information that can change during the lifecycle of the component.\r\n\r\n#### Example of State:\r\n\r\nIf you want to track whether a user has clicked a button or not, you would use **state** to store whether they have clicked it.\r\n\r\n---\r\n\r\n### 2. **What is `useState` in React?**\r\n\r\n* **`useState`** is a **React hook** that lets you add state to your functional components. Before hooks, only class components could have state, but now functional components can manage their state using `useState`.\r\n\r\n#### How `useState` Works:\r\n\r\n* **`useState`** returns an **array** with two items:\r\n\r\n  * The **current state value**.\r\n  * A **function to update** the state.\r\n\r\n#### Syntax:\r\n\r\n```javascript\r\nconst [state, setState] = useState(initialValue);\r\n```\r\n\r\n* **`state`**: The current state value (e.g., `visited` in your case).\r\n* **`setState`**: A function to update the state.\r\n* **`initialValue`**: The initial value of the state (e.g., `false` for \"Not Visited\").\r\n\r\n#### Example:\r\n\r\n```javascript\r\nconst [visited, setVisited] = useState(false);\r\n```\r\n\r\n* Initially, `visited` is `false` (meaning the country hasn't been visited).\r\n* You can later use `setVisited(true)` to change `visited` to `true`.\r\n\r\n---\r\n\r\n### 3. **What is a Handler (Event Handler)?**\r\n\r\n* A **handler** is a **function** that is executed in response to an event. In React, handlers are commonly used to manage user interactions, like clicks, typing, or form submissions.\r\n\r\n#### Example in your code:\r\n\r\n```javascript\r\nconst handleVisited = () => {\r\n  setVisited(visited ? false : true);\r\n};\r\n```\r\n\r\nHere:\r\n\r\n* **`handleVisited`** is the **handler** function that runs when the user clicks the button.\r\n* The **purpose** of the handler is to update the state, which triggers a re-render and changes the button text.\r\n\r\n### Why Use a Handler?\r\n\r\nHandlers are used to manage **user interactions** (like clicking a button or entering text), **update the state**, and trigger the necessary updates in the component.\r\n\r\n#### Benefits of Handlers:\r\n\r\n* **Encapsulation**: Handlers keep the logic for user interactions contained in separate functions, making it easy to manage.\r\n* **Reactivity**: When the handler updates the state, React automatically re-renders the component with the new state.\r\n* **Reusability**: You can pass handlers to other components or reuse them within the same component.\r\n\r\n---\r\n\r\n### Putting it All Together:\r\n\r\n1. **State** (`visited` in your example) keeps track of whether the country has been visited or not.\r\n2. **`useState`** is the hook that allows you to add state to your component and provides a way to update it.\r\n3. **Handler** (`handleVisited`) is the function that changes the state (from `false` to `true`), and is triggered when the user clicks the button.\r\n\r\nIn your code, the button's text changes based on the **`visited` state**, and when the button is clicked, the **handler** function (`handleVisited`) updates the state.\r\n\r\n### Example Recap:\r\n\r\n* Initially, `visited` is `false`, so the button says \"Not Visited\".\r\n* When you click the button, the `handleVisited` handler is called, which toggles the state (`visited` becomes `true`).\r\n* The component re-renders, and the button now shows \"Visited\".\r\n\r\nGreat question! Let's break down **both versions** and understand the **difference**:\r\n\r\n### 1. **First Version (Ternary Operator):**\r\n\r\n```jsx\r\n<div className={`country ${visited ? 'country-visited' : 'country'}`}>\r\n```\r\n\r\n#### Explanation:\r\n\r\n* This uses a **ternary operator** to check if `visited` is `true` or `false`:\r\n\r\n  * If `visited` is `true`, the class will be `\"country country-visited\"`.\r\n  * If `visited` is `false`, the class will be `\"country country\"`.\r\n\r\n#### Result:\r\n\r\n* **If `visited` is `true`**: `class=\"country country-visited\"`\r\n* **If `visited` is `false`**: `class=\"country country\"`\r\n\r\nThis is useful when you want to **conditionally apply one of two classes**.\r\n\r\n---\r\n\r\n### 2. **Second Version (Logical AND `&&` Operator):**\r\n\r\n```jsx\r\n<div className={`country ${visited && 'country-visited'}`}>\r\n```\r\n\r\n#### Explanation:\r\n\r\n* This uses the **logical AND (`&&`) operator**.\r\n\r\n  * If `visited` is `true`, the class will be `\"country country-visited\"`.\r\n  * If `visited` is `false`, it will just be `\"country\"` (because `false && 'country-visited'` evaluates to `false`, so nothing is added).\r\n\r\n#### Result:\r\n\r\n* **If `visited` is `true`**: `class=\"country country-visited\"`\r\n* **If `visited` is `false`**: `class=\"country\"`\r\n\r\nThis is a simpler way to conditionally add a class when a condition is true, but if the condition is false, nothing is added.\r\n\r\n---\r\n\r\n### **Key Differences:**\r\n\r\n1. **Ternary Operator** (`visited ? 'country-visited' : 'country'`):\r\n\r\n   * **More explicit**: You **always specify** a class for both true and false conditions.\r\n   * **More flexibility**: You can apply **different classes** for both true and false conditions.\r\n\r\n   Example:\r\n\r\n   * If `visited` is `true`, use `'country-visited'`.\r\n   * If `visited` is `false`, use `'country'`.\r\n\r\n2. **Logical AND (`&&`)** (`visited && 'country-visited'`):\r\n\r\n   * **Simpler**: Only **adds the class if the condition is true**. If the condition is false, nothing happens.\r\n   * **Less flexible**: Only useful when you want to **add one class** based on the condition.\r\n\r\n   Example:\r\n\r\n   * If `visited` is `true`, it adds `'country-visited'`.\r\n   * If `visited` is `false`, nothing is added.\r\n\r\n### **Which to Use?**\r\n\r\n* Use the **ternary operator** when you need to apply **two different classes** based on a condition.\r\n* Use the **logical AND** when you only need to **conditionally add one class**. It's more concise but limited in flexibility.\r\n\r\n---\r\n\r\n### Example in Context:\r\n\r\n1. **Using Ternary Operator (More Control)**:\r\n\r\n```jsx\r\n<div className={`country ${visited ? 'country-visited' : 'country'}`}>\r\n```\r\n\r\nIf you want to add a different class when `visited` is `false`, you would use this approach. For example, you could have a red border when `visited` is `false` and a green border when it's `true`.\r\n\r\n2. **Using Logical AND (Simpler)**:\r\n\r\n```jsx\r\n<div className={`country ${visited && 'country-visited'}`}>\r\n```\r\n\r\nIf you only want to add `'country-visited'` when `visited` is `true`, and no class when `visited` is `false`, this is the simpler choice.\r\n\r\n\r\nGot it! Here\u2019s how you can **conditionally apply CSS classes** without CSS styles, just focusing on the **class application logic**.\r\n\r\n### 1. **Using Ternary Operator** (Two conditions):\r\n\r\n```jsx\r\n<div className={`base-class ${condition ? 'class-true' : 'class-false'}`}>\r\n```\r\n\r\n* **If `condition` is `true`**, the `class-true` will be applied.\r\n* **If `condition` is `false`**, the `class-false` will be applied.\r\n\r\n### 2. **Using Logical AND (`&&`)** (One condition):\r\n\r\n```jsx\r\n<div className={`base-class ${condition && 'class-true'}`}>\r\n```\r\n\r\n* **If `condition` is `true`**, `class-true` will be applied.\r\n* **If `condition` is `false`**, **nothing will be added** (it will just have `base-class`).\r\n\r\n### 3. **Multiple Conditional Classes**:\r\n\r\n```jsx\r\n<div className={`base-class ${condition1 && 'class-1'} ${condition2 && 'class-2'}`}>\r\n```\r\n\r\n* **If `condition1` is `true`**, `class-1` will be added.\r\n* **If `condition2` is `true`**, `class-2` will be added.\r\n* If the conditions are false, their respective classes won't be added.\r\n\r\n### 4. **Multiple Conditional Classes with Ternary:**\r\n\r\n```jsx\r\n<div className={`base-class ${condition1 ? 'class-1' : 'class-2'} ${condition2 ? 'class-3' : 'class-4'}`}>\r\n```\r\n\r\n* **`condition1`** and **`condition2`** decide between two classes for each condition.\r\n\r\n---\r\n\r\n### **Summary of Syntax**:\r\n\r\n* **For one condition**: Use the **logical AND (`&&`)** if you only want to add a class when the condition is true.\r\n* **For two conditions**: Use the **ternary operator (`? :`)** if you want to apply one class for `true` and another class for `false`.\r\n\r\nThese are common ways to conditionally apply CSS classes in JSX (React).\r\n\r\n\r\nLet's break it down more simply.\r\n\r\n### 1. **State Lifted Up**\r\n\r\nWhen we say **\"state lifted up\"**, it means **moving the state** from a **child component** to a **parent component** so the parent can **control** and **manage** it.\r\n\r\n#### Story Example (Simple):\r\n\r\nImagine you're in a classroom with students (children). The **teacher** (parent) wants to keep track of **which students have completed their homework**. Instead of each student keeping track of their own homework, the **teacher** is in charge of managing the list of students who have finished their homework.\r\n\r\nThe **teacher** **shares this list** with the students (children) and updates it whenever a student marks their homework as complete.\r\n\r\nIn React, the **teacher** is the **parent component** (`Countries`), and the **students** are the **child components** (`Country`). The **homework** status (whether a country is visited or not) is **managed by the parent component**.\r\n\r\n### Example in Your Code:\r\n\r\nYou have this:\r\n\r\n```js\r\nconst [visitedCountries, setVisitedCountries] = useState([]);\r\n```\r\n\r\n* **`visitedCountries`** is the list of countries that have been visited.\r\n* **`setVisitedCountries`** is the function that allows you to update that list.\r\n\r\nBut you want to allow each **`Country`** component to tell the parent **when it's visited**. So, instead of **storing** the list of visited countries in each **`Country`**, you move the state (`visitedCountries`) to the **parent** (`Countries`).\r\n\r\nThat\u2019s why it\u2019s called **state lifted up** \u2014 the state (`visitedCountries`) is now controlled by the **parent** instead of the **child**.\r\n\r\n---\r\n\r\n### 2. **Passing the Handler as Props**\r\n\r\nNow, you have this function in the parent (`Countries`):\r\n\r\n```js\r\nconst handleVisitedCountries = () => {\r\n    console.log(\"handle visited country clicked!\");\r\n}\r\n```\r\n\r\n* **`handleVisitedCountries`** is the function that will run when a country is marked as visited.\r\n* You want the **child components** (`Country`) to be able to call this function. So, you **pass it** down to the **child components** as a **prop**.\r\n\r\nIn your `Countries` component, you do this:\r\n\r\n```js\r\n<Country key={country.ccn3.ccn3} country={country} handleVisitedCountries={handleVisitedCountries} />\r\n```\r\n\r\n* **`handleVisitedCountries={handleVisitedCountries}`** is passing the `handleVisitedCountries` function as a **prop** to the `Country` component.\r\n\r\n#### In the `Country` Component:\r\n\r\nIn the `Country` component, you **receive** the `handleVisitedCountries` function by **destructuring** it from the props:\r\n\r\n```js\r\nconst Country = ({ country, handleVisitedCountries }) => {\r\n    return (\r\n        <div>\r\n            <button onClick={handleVisitedCountries}>Mark as Visited</button>\r\n        </div>\r\n    );\r\n};\r\n```\r\n\r\n* When the user clicks the button, the **`handleVisitedCountries`** function is called, which tells the **parent** (Countries) that a country has been visited.\r\n\r\n---\r\n\r\n### How It Works Together:\r\n\r\n1. The **parent** (`Countries`) has the **state** (`visitedCountries`) and the **function** (`handleVisitedCountries`) that updates this state.\r\n2. The **child** (`Country`) receives this function (`handleVisitedCountries`) as a **prop**.\r\n3. The **child** calls the function (`handleVisitedCountries`) when the user clicks a button (for marking a country as visited).\r\n4. The **parent** (`Countries`) updates the state (`visitedCountries`) whenever the child calls the function.\r\n\r\n### Why is this useful?\r\n\r\n* **State lifting** makes sure that the **parent component** can control the data, while the **child components** only inform the parent when something changes (e.g., when a country is visited).\r\n* This is a common React pattern to **centralize state management** and make sure the parent has the final say in controlling the data.\r\n\r\n---\r\n\r\n### Visual Example:\r\n\r\n1. **Parent (`Countries`)** has the list of visited countries (`visitedCountries`).\r\n2. **Child (`Country`)** tells the parent that a country has been visited by calling the `handleVisitedCountries` function (passed down as a prop).\r\n3. The parent updates the list, and everything re-renders based on the updated state.\r\n\r\n---\r\n\r\n### Summary in Simple Terms:\r\n\r\n* **State Lifted Up**: The parent component controls the data (like visited countries) instead of each child doing it individually.\r\n* **Passing Event Handler as Props**: The parent sends a function to the child so the child can trigger that function when something happens (like clicking a button).\r\n\r\n\r\nYes, exactly! Here's a simple breakdown:\r\n\r\n1. The **child component** calls the `handleVisitedCountries` function, passing the **`country`** object as an argument (parameter).\r\n2. The **parent component** has the `handleVisitedCountries` function, which **receives** the `country` object as a parameter.\r\n3. The parent can then use this **`country`** data for whatever it needs (like logging, updating state, etc.).\r\n\r\n### Example:\r\n\r\n**In the Child Component**:\r\n\r\n```js\r\nhandleVisitedCountries(country)  // Pass the 'country' object to the parent\r\n```\r\n\r\n**In the Parent Component**:\r\n\r\n```js\r\nconst handleVisitedCountries = (country) => {\r\n    console.log(\"Country data received:\", country);  // Now the parent can access the 'country' object\r\n}\r\n```\r\n\r\nSo, you're absolutely correct! The **child** sends the **country object** to the **parent**, and the **parent** receives it through the function parameter.\r\n\r\n\r\nLet\u2019s break it down with a simple story.\r\n\r\n### **The Story:**\r\n\r\nImagine you're in a **classroom** (the React **state**), and you want to keep a list of **students** who have completed their homework (the **`visitedCountries`** array).\r\n\r\n* At first, the list is empty because no students have completed their homework.\r\n\r\n  **State**: `visitedCountries = []`\r\n\r\nNow, let\u2019s say one student finishes their homework (the **`country`** object). You want to **add** this student's name to the list of completed students (i.e., adding the `country` to the `visitedCountries` array).\r\n\r\nHere's the tricky part: You **shouldn\u2019t directly change the list** because it could mess up React\u2019s re-rendering. Instead, you **create a new list** (an updated copy) and use that updated list to **replace** the old list.\r\n\r\n#### Why not directly change the list?\r\n\r\nImagine you were writing in a notebook, and instead of erasing and rewriting something, you just scratched out the old content and wrote over it. This could confuse the notebook, and it might not know when you actually made changes. But if you completely replace the page with a new one (a **new array**), the notebook (React) can understand that you made changes and will update properly.\r\n\r\n### **In React** (like in our classroom):\r\n\r\nHere\u2019s what your code is doing:\r\n\r\n1. **Click the button (something happens)**, and we want to mark the country as visited.\r\n\r\n2. **We take the old list of countries (`visitedCountries`) and make a new list** (`newVisitedCountry`) by adding the new `country`.\r\n\r\n   ```js\r\n   const newVisitedCountry = [...visitedCountries, country]\r\n   ```\r\n\r\n   * **`[...visitedCountries]`** creates a **copy** of the old list (using the **spread operator**).\r\n   * **`country`** is the new student (or country) who completed their homework, and we add them to the new list.\r\n\r\n3. Then we update the **state** with this **new list**.\r\n\r\n   ```js\r\n   setVisitedCountries(newVisitedCountry)\r\n   ```\r\n\r\n### **Why Immutable Arrays?**\r\n\r\n* **Immutability** means **we don't change the original list directly**, but we make a new copy with the changes.\r\n* This is important in **React** because React uses **state comparison** to decide when to re-render the component. If you change the original array directly, React won\u2019t know the list has changed. But if you replace the old list with a new one, React can easily detect the change and update the component accordingly.\r\n\r\n### **Summary in Simple Terms:**\r\n\r\n* The **classroom** (state) has a list of students (countries).\r\n* Instead of scratching out the old names and adding new ones directly, we **create a new list** with the added student (country) to make sure everything stays clear and updated.\r\n* React can then **properly recognize** the change and **re-render** the component.\r\n\r\nThis is why **immutable arrays** (creating a new array instead of modifying the old one) are important for React\u2019s efficient rendering and state management.\r\n\r\nHere's the basic and general syntax for **updating arrays in React state** using immutability:\r\n\r\n### 1. **Add an Item to an Array (Using Spread Operator)**\r\n\r\n```js\r\nconst newArray = [...oldArray, newItem]; // Adds newItem to the end\r\n```\r\n\r\n### 2. **Remove an Item from an Array**\r\n\r\nTo remove an item by its index:\r\n\r\n```js\r\nconst newArray = oldArray.filter((item, index) => index !== itemIndex);\r\n```\r\n\r\n### 3. **Update an Item in an Array**\r\n\r\nTo update an item based on a condition (like an ID):\r\n\r\n```js\r\nconst newArray = oldArray.map(item => \r\n  item.id === targetId ? { ...item, updatedField: newValue } : item\r\n);\r\n```\r\n\r\n### 4. **Replace the Array Completely**\r\n\r\nTo replace the old array with a new one:\r\n\r\n```js\r\nsetArray(newArray); // Replaces old array with the new one\r\n```\r\n\r\n### **General Steps to Update Arrays in React:**\r\n\r\n1. **Create a new array** using the old one as a base (`[...oldArray]`).\r\n2. **Modify** the array (add, remove, or update items).\r\n3. **Set the new array** in state with `setState()` (e.g., `setArray(newArray)`).\r\n\r\nThis approach keeps the state immutable, allowing React to detect changes and re-render properly.\r\n\r\n\r\n\r\n### **Why We Don\u2019t Use `handleVisitedFlags(flagimage)` Directly in `onClick`:**\r\n\r\n#### 1. **Immediate Invocation Problem**\r\n\r\n* If we write **`handleVisitedFlags(flagimage)`** directly inside the `onClick`, like this:\r\n\r\n  ```js\r\n  <button onClick={handleVisitedFlags(flagimage)}>Add flag</button>\r\n  ```\r\n\r\n  * **What happens?**\r\n\r\n    * The function **runs immediately** when the component is rendered.\r\n    * This means **the button is clicked even before you click** it, which is definitely not what we want.\r\n  * **Why is this a problem?**\r\n\r\n    * We want to wait for the user to click the button before the function runs. Calling the function directly makes it happen too soon.\r\n\r\n#### 2. **Delayed Invocation with an Arrow Function**\r\n\r\n* To **wait until the button is clicked**, we use an **arrow function**:\r\n\r\n  ```js\r\n  <button onClick={() => handleVisitedFlags(flagimage)}>Add flag</button>\r\n  ```\r\n\r\n  * **What happens?**\r\n\r\n    * The arrow function **creates a wrapper** that does not execute right away.\r\n    * It waits for the **button click event** before calling the function.\r\n    * When the button is clicked, the arrow function **calls `handleVisitedFlags(flagimage)`** at that moment.\r\n  * **Why is this better?**\r\n\r\n    * It **delays** the execution until the user actually clicks the button, ensuring the function runs at the right time.\r\n\r\n---\r\n\r\n### **In Simple Terms:**\r\n\r\n* **Without the arrow function**, the function **runs immediately** as soon as the component renders (not when you click).\r\n* **With the arrow function**, the function **waits** and **runs only when the button is clicked**.\r\n\r\n---\r\n\r\nNow, this is a beautiful way to remember and understand why we use the arrow function in event handlers."
            },
            {
                "title": "React-Routing-Link-NavLink-Navigation-DataLoading-Outlet-useNavigator",
                "content": "# React Router is a **standard library for routing in React applications**.\r\nit allows you to create **single-page applications (SPAs)** with multiple views (pages) without refreshing the whole page. Instead of sending a new request to the server when the URL changes, React Router updates the UI to match the current route, keeping the application fast and seamless.\r\n\r\n### Key Concepts of React Router:\r\n\r\n1. **Routing** \u2013 Mapping different URLs (paths) to different React components.\r\n\r\n   * Example: `/home` \u2192 `HomePage`, `/about` \u2192 `AboutPage`\r\n\r\n2. **Single-Page Application (SPA)** \u2013 Only one HTML file (`index.html`) is loaded, and React Router handles navigation on the client side.\r\n\r\n3. **Components**:\r\n\r\n   * **`BrowserRouter` / `HashRouter`** \u2192 Wraps the app and keeps track of the URL.\r\n   * **`Routes`** \u2192 Defines all possible routes.\r\n   * **`Route`** \u2192 Maps a specific path to a React component.\r\n   * **`Link` / `NavLink`** \u2192 Navigation elements that let you switch routes without reloading.\r\n   * **`useNavigate`** \u2192 Hook for programmatic navigation (like redirecting after login).\r\n\r\n### Example\r\n\r\n```jsx\r\nimport { BrowserRouter as Router, Routes, Route, Link } from \"react-router-dom\";\r\n\r\nfunction App() {\r\n  return (\r\n    <Router>\r\n      <nav>\r\n        <Link to=\"/\">Home</Link> | <Link to=\"/about\">About</Link>\r\n      </nav>\r\n\r\n      <Routes>\r\n        <Route path=\"/\" element={<Home />} />\r\n        <Route path=\"/about\" element={<About />} />\r\n      </Routes>\r\n    </Router>\r\n  );\r\n}\r\n\r\nfunction Home() {\r\n  return <h2>Home Page</h2>;\r\n}\r\n\r\nfunction About() {\r\n  return <h2>About Page</h2>;\r\n}\r\n```\r\n- React Router (old mode) = just a routing library.\r\n\r\n- React Router (new \u201cdata router\u201d mode) = adds data fetching + mutations, making it more like a full-stack framework for React apps.\r\n\u2705 When you click the links, React Router changes the URL and renders the correct component, **without reloading the page**.\r\n\r\n## Install React-Router\r\nusing npm:\r\n```bash\r\nnpm i react-router\r\n```\r\n\r\n### Create Router and Render\r\n**1. `createBrowserRouter`**\r\nIt **creates a router object** that defines all your routes (paths, components, data loaders, actions, error boundaries, etc.).\r\nIt uses the **browser\u2019s history API** (pushState/replaceState) to update the URL without refreshing the page.\r\n\r\n\r\n### Example\r\n\r\n```jsx\r\nimport { createBrowserRouter } from \"react-router-dom\";\r\n\r\nconst router = createBrowserRouter([\r\n  {\r\n    path: \"/\",          // URL path\r\n    element: <Home />,  // Component to show\r\n  },\r\n  {\r\n    path: \"/about\",\r\n    element: <About />,\r\n  },\r\n]);\r\n```\r\nor we can use component replace by element, so then we have to give(only component name) like this:\r\n```jsx\r\n{\r\n    path: \"/about\",\r\n    component: About\r\n}\r\n```\r\nNow `router` is a **configuration object** that React Router will use.\r\n\r\n**2. `RouterProvider`**\r\n\r\n**component** that takes a `router` (created by `createBrowserRouter`) and provides it to your whole app.\r\nIt\u2019s like a \u201cmanager\u201d that knows how to render routes, run loaders, run actions, handle navigation, etc.\r\n\r\n\ud83d\udc49 Think of it like:\r\n\r\n> \u201cOkay React, here\u2019s the router I built. Please make the app follow these rules.\u201d\r\n\r\n### Example\r\n\r\n```jsx\r\nimport { RouterProvider } from \"react-router-dom\";\r\n\r\nfunction App() {\r\n  return <RouterProvider router={router} />;\r\n}\r\n```\r\n\r\nNow the app knows:\r\n\r\n* What to render when the URL changes\r\n* How to fetch data (`loader`) before showing a page\r\n* How to handle form submissions (`action`)\r\n\r\n\r\n* **`createBrowserRouter`** \u2192 Builds a **router object** (your route config).\r\n* **`RouterProvider`** \u2192 Uses that router object to make your app\u2019s navigation & data work.\r\n\r\n---\r\n\r\n## Routing \r\nRouting is the process of deciding which content to show based on the current URL (path).\r\nIt\u2019s like a map between URLs and the parts of your app (pages, components, or views).\r\n\r\n### 1. Nested Route: Routes can be nested inside parent routes through children.\r\nIn nested routes, we use the <Outlet /> component inside the parent route\u2019s element to render the child routes.\r\n```jsx\r\nconst router = createBrowserRouter([\r\n  {\r\n    path: \"/\",\r\n    element: <App></App>,   // Parent layout\r\n    children: [             // Nested routes\r\n      {//Index routes are defined by setting index: true on a route object without a path.\r\n        index: true,        // Default child route (when path = \"/\")\r\n        Component: Home,    // This renders <Home />\r\n      },\r\n      {\r\n        path:\"/Card\",       // Nested child route\r\n        Component: Card     // This renders <Card />\r\n      }\r\n    ]\r\n  } \r\n])\r\n```\r\n### 2. Child routes are rendered through the <Outlet/> in the parent route.\r\n```jsx\r\nimport { Outlet } from 'react-router'   // Outlet is imported from react-router to render child routes\r\nimport './App.css'\r\n\r\nfunction App() {\r\n  return (\r\n    <>\r\n      <h2>hello</h2>\r\n      <Outlet></Outlet>   {/* <-- This is where child routes will be rendered.\r\n                             When a nested route is matched, its component\r\n                             will appear here inside the parent layout */}\r\n    </>\r\n  )\r\n}\r\nexport default App\r\n```\r\n### 3. Prefix route\r\nA prefix route is a route that has a path but no Component. Its main purpose is to act as a grouping mechanism for child routes that share the same path prefix.\r\n\r\n```javascript\r\ncreateBrowserRouter([\r\n  {\r\n    // no component, just a path\r\n    path: \"/projects\",\r\n    children: [\r\n      { index: true, Component: ProjectsHome },\r\n      { path: \":pid\", Component: Project },\r\n      { path: \":pid/edit\", Component: EditProject },\r\n    ],\r\n  },\r\n]);\r\n```\r\n\r\n* The parent route has `path: \"/projects\"` but **no `Component`**.\r\n* It groups all child routes under `/projects`.\r\n* Child routes:\r\n\r\n  * `index: true` \u2192 `/projects` (renders `ProjectsHome`)\r\n  * `:pid` \u2192 `/projects/:pid` (renders `Project`)\r\n  * `:pid/edit` \u2192 `/projects/:pid/edit` (renders `EditProject`)\r\n\r\n\u2705 **Benefit:** You don\u2019t need an extra layout component, but you still get a clean path hierarchy.\r\n\r\nTwo scenario:\r\n**1\ufe0f\u20e3 No path + Component wraps children**\r\n\r\n```javascript\r\n{\r\n  Component: MarketingLayout, // layout wrapper\r\n  children: [\r\n    { index: true, Component: Home },        \r\n    { path: \"contact\", Component: Contact },\r\n  ],\r\n}\r\n```\r\n\r\n**How it works:**\r\n\r\n* **Parent route has no `path`** \u2192 It **doesn\u2019t match a URL on its own**.\r\n* **Parent has a `Component`** \u2192 This component (`MarketingLayout`) **always renders** for any of its child routes.\r\n* Child routes define the actual URL paths (`/` or `/contact`).\r\n* **Use case:** For shared layouts, navbars, sidebars, or wrappers around multiple pages.\r\n\r\n**Example URL mapping:**\r\n\r\n| URL        | Rendered Components         |\r\n| ---------- | --------------------------- |\r\n| `/`        | `MarketingLayout > Home`    |\r\n| `/contact` | `MarketingLayout > Contact` |\r\n\r\n\r\n**2\ufe0f\u20e3 No Component + path**\r\n\r\n```javascript\r\n{\r\n  path: \"/projects\",\r\n  children: [\r\n    { index: true, Component: ProjectsHome },\r\n    { path: \":pid\", Component: Project },\r\n  ],\r\n}\r\n```\r\n\r\n**How it works:**\r\n\r\n* **Parent route has a `path`** \u2192 The URL must match `/projects` (or `/projects/:pid`) to enter this route branch.\r\n* **Parent has no `Component`** \u2192 Nothing is rendered by the parent itself.\r\n* Children define the content that is rendered when the path matches.\r\n* **Use case:** For grouping routes under a common URL prefix without adding extra UI/wrappers.\r\n\r\n**Example URL mapping:**\r\n\r\n| URL             | Rendered Components |\r\n| --------------- | ------------------- |\r\n| `/projects`     | `ProjectsHome`      |\r\n| `/projects/123` | `Project`           |\r\n\r\n\r\n#### **\ud83d\udd11 Key Differences**\r\n\r\n| Aspect            | No Path + Component          | No Component + Path           |\r\n| ----------------- | ---------------------------- | ----------------------------- |\r\n| Parent URL match  | Does **not** match URL       | Must match URL                |\r\n| Parent renders UI | **Yes** (the layout/wrapper) | No                            |\r\n| Child URL         | Defined inside children      | Defined relative to parent    |\r\n| Common use case   | Layouts, wrappers            | Route grouping under a prefix |\r\n\r\n\r\n**In short:**\r\n\r\n* **No path + component** \u2192 URL depends on children, but parent **always renders a UI wrapper**.\r\n* **No component + path** \u2192 URL defines grouping, but parent **renders nothing**; it just organizes routes.\r\n\r\n![alt text](image.png)\r\n\r\n### 4. Navigation\r\n#### i. <Link>:\r\n<Link> is a component provided by React Router (react-router-dom) to handle navigation between routes/pages without refreshing the browser.\r\n```jsx\r\n        <Link to=\"/card\" className=\"pr-5\">Card</Link>\r\n```\r\n\r\n#### ii. NavLink:\r\n<NavLink> is a special component from React Router used for navigation, just like <Link>, but with the added feature of automatically detecting the active route so you can style the currently active link differently. While both <Link> and <NavLink> enable client-side navigation without page reloads in a single-page application, <NavLink> is ideal for navbars or menus because it provides the isActive prop to conditionally apply styles to highlight the active link, whereas <Link> does not have built-in active route detection.\r\n```jsx\r\n<NavLink to=\"/card\" className={ ({isActive}) => isActive ? \"text-blue-700 underline underline-offset-4 decoration-2 decoration-cyan-950 pr-5\" : \"text-black pr-5\"}>Card</NavLink>\r\n```\r\n\r\n### 5. Data Loading\r\nIn React, Data Loading refers to the process of fetching data from an external source (like an API, database, or file) before or during rendering your UI. There are multiple ways to do this:\r\ni. Data is provided to route components from route loaders:\r\n```jsx\r\nconst router = createBrowserRouter([\r\n      {\r\n        path: \"/userNormal\", \r\n        loader: () => fetch('https://jsonplaceholder.typicode.com/users'),\r\n        Component: UserNormal\r\n      }\r\n])\r\n```\r\nand The data is available in route components with useLoaderData.\r\n```jsx\r\nimport { useLoaderData } from \"react-router\"\r\nconst UserNormal = () => {\r\n    const user = useLoaderData()\r\n    return(\r\n        <div>\r\n            {\r\n                user.map((user) => <p key={user.id} className=\"m-4 text-left\">{user.id}. \r\n                Username: {user.username},\r\n                Address: {user.address.street}, {user.address.suite}, {user.address.city}</p>)\r\n            }\r\n        </div>\r\n    )\r\n}\r\n```\r\nii. Also data can loading using suspense: (but doesn't need to use useLoaderData this time because in here promise can send as props to the component.)\r\n```jsx\r\nconst userFetch = fetch('https://dummyjson.com/users').then(res => res.json())\r\n```\r\nthen:\r\n```jsx\r\n      {\r\n        path: \"/userSuspense\",\r\n        element: \r\n        <Suspense fallback={<div className='flex items-center justify-center h-[250px]'>\r\n           <span className=\"loading loading-bars loading-xl\"></span>\r\n        </div>}>\r\n              <UserSuspense userFetch={userFetch}></UserSuspense>\r\n        </Suspense>\r\n      }\r\n```\r\n\r\n### 6. Dynamic Routing\r\nIn **React Router**, **dynamic routing** means creating routes that can **change based on URL parameters**, allowing you to render different content for different URLs using **a single route definition**.\r\n\r\n**Why It\u2019s Useful**\r\n* You don\u2019t need to manually define routes for each user/product/post.\r\n* It's perfect for detail pages like:\r\n\r\n  * User profiles \u2192 `/users/:userId`\r\n  * Product details \u2192 `/products/:productId`\r\n  * Blog posts \u2192 `/posts/:slug`\r\n\r\n\r\n**How to Use Dynamic Routing in React Router**\r\n#### 1\ufe0f\u20e3 **Define a Route with a Dynamic Segment**\r\n```jsx\r\n{\r\n  path: \"/users/:userId\",\r\n  loader: ({ params }) => {\r\n    return fetch(`https://jsonplaceholder.typicode.com/users/${params.userId}`);\r\n  },\r\n  Component: UserDetails\r\n}\r\n```\r\nN.B: Always remember that using in the path /users/:anyname, \r\nthen you must need to use in the loader fetch as the same as anyname like in the below:\r\n```jsx\r\nfetch(`https://jsonplaceholder.typicode.com/users/${params.anyname}`)\r\n```\r\n\r\n* `:userId` is the dynamic part.\r\n* You can access it via `params.userId` in the loader.\r\n\r\n#### 2\ufe0f\u20e3 **Link to Dynamic Routes**\r\n\r\n```jsx\r\n<Link to={`/users/${user.id}`}>View Details</Link>\r\n```\r\nEach user\u2019s ID will be inserted into the URL dynamically.\r\n\r\n#### 3\ufe0f\u20e3 **Read the Data in the Component**\r\n\r\nUsing `useLoaderData()`:\r\n\r\n```jsx\r\nimport { useLoaderData } from \"react-router\";\r\n\r\nconst UserDetails = () => {\r\n  const user = useLoaderData();\r\n  return (\r\n    <div>\r\n      <h2>{user.username}</h2>\r\n      <p>Email: {user.email}</p>\r\n    </div>\r\n  );\r\n};\r\n```\r\n\r\nOr using `useParams()` if you want to handle fetching manually:\r\n\r\n```jsx\r\nimport { useParams } from \"react-router\";\r\nimport { useEffect, useState } from \"react\";\r\n\r\nconst UserDetails = () => {\r\n  const { userId } = useParams();\r\n  const [user, setUser] = useState(null);\r\n\r\n  useEffect(() => {\r\n    fetch(`https://jsonplaceholder.typicode.com/users/${userId}`)\r\n      .then(res => res.json())\r\n      .then(data => setUser(data));\r\n  }, [userId]);\r\n\r\n  if (!user) return <p>Loading...</p>;\r\n\r\n  return <h2>{user.username}</h2>;\r\n};\r\n```\r\n\r\n\r\n#### \ud83d\ude80 **In Short**\r\n* Define route with `:paramName`\r\n* Navigate with `<Link to={...}>`\r\n* Read with `useParams()` or `useLoaderData()`\r\n\r\n### 7. Use of hooks\r\n#### i. useNavigate hook: \r\nuseNavigate is a React Router hook that lets you navigate programmatically inside your app (instead of using <Link> or <NavLink>).\r\n\r\n```jsx\r\nimport React from \"react\";\r\nimport { useNavigate } from \"react-router-dom\";\r\n\r\nfunction Home() {\r\n  const navigate = useNavigate();  // \ud83d\udc48 Initialize the hook\r\n\r\n  const goToAbout = () => {\r\n    navigate(\"/about\");  // \ud83d\udc48 Navigate programmatically\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h1>Home Page</h1>\r\n      <button onClick={goToAbout}>Go to About</button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Home;\r\n```\r\n\r\n**`useNavigate`** \u2014 React Router Hook\r\n\r\n`useNavigate` is a **React Router hook** that lets you **navigate programmatically** inside your app (instead of using `<Link>` or `<NavLink>`).\r\nIt works like the old `useHistory().push()` in earlier versions.\r\n\r\n---\r\n\r\n**Importing it**\r\n\r\n```jsx\r\nimport { useNavigate } from \"react-router-dom\";\r\n```\r\n\r\n---\r\n\r\n##### **Basic Usage**\r\n\r\nHere\u2019s a simple example of using `useNavigate` inside a component:\r\n\r\n```jsx\r\nimport React from \"react\";\r\nimport { useNavigate } from \"react-router-dom\";\r\n\r\nfunction Home() {\r\n  const navigate = useNavigate();  // \ud83d\udc48 Initialize the hook\r\n\r\n  const goToAbout = () => {\r\n    navigate(\"/about\");  // \ud83d\udc48 Navigate programmatically\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h1>Home Page</h1>\r\n      <button onClick={goToAbout}>Go to About</button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Home;\r\n```\r\n##### \u23ea **Navigating Back / Forward**\r\n\r\nYou can also navigate relative to history stack:\r\n\r\n```jsx\r\nnavigate(-1); // Go back\r\nnavigate(1);  // Go forward\r\n```\r\n\r\n\r\n##### \ud83e\udde0 **With Options**\r\n\r\nYou can add options like `replace` to avoid adding a new entry in the browser history:\r\n\r\n```jsx\r\nnavigate(\"/login\", { replace: true });\r\n```\r\n\r\n\ud83d\udc49 This is useful after logout \u2014 it replaces the current URL so the user can\u2019t go \u201cback\u201d to the protected page.\r\n\r\n\r\n##### \ud83e\udded **Navigating with Parameters**\r\n\r\nIf you have dynamic routes like `/users/:id`, you can pass the ID dynamically:\r\n\r\n```jsx\r\nnavigate(`/users/${userId}`);\r\n```\r\n\r\n#### ii. useNavigation hook: \r\n`useNavigation` is a React Router **data router hook** that lets you **track the current navigation state** of the app.\r\n\ud83d\udc49 It tells you whether the app is **idle**, **submitting**, or **navigating**, and gives information about the navigation in progress.\r\n\r\nIt\u2019s especially useful when:\r\n\r\n* You want to show **loading spinners** during route changes\r\n* You want to **disable buttons** or **indicate progress** while navigation happens\r\n* You\u2019re using **loaders** or **actions** in your routes (introduced in v6.4+)\r\n\r\n**Importing it**\r\n```jsx\r\nimport { useNavigation } from \"react-router-dom\";\r\n```\r\n\r\n**Basic Usage Example**\r\n\r\n```jsx\r\nimport React from \"react\";\r\nimport { useNavigation } from \"react-router-dom\";\r\n\r\nfunction AppLoader() {\r\n  const navigation = useNavigation();\r\n\r\n  return (\r\n    <div>\r\n      {navigation.state === \"loading\" && <p>\u23f3 Page is loading...</p>}\r\n      {navigation.state === \"submitting\" && <p>\ud83d\udce4 Submitting data...</p>}\r\n      {navigation.state === \"idle\" && <p>\u2705 Ready</p>}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default AppLoader;\r\n```\r\n\r\n\u2705 Here, `navigation.state` can be one of:\r\n\r\n* `\"idle\"` \u2192 nothing happening\r\n* `\"submitting\"` \u2192 form is being submitted via `<Form>` action\r\n* `\"loading\"` \u2192 loader data is being fetched (e.g., route change or deferred data)\r\n\r\n\r\nReal-World Example \u2014 Show a Loader While Navigating\r\n```jsx\r\nfunction Layout() {\r\n  const navigation = useNavigation();\r\n\r\n  return (\r\n    <div>\r\n      <header>My App</header>\r\n\r\n      {navigation.state === \"loading\" && (\r\n        <div className=\"loading-indicator\">Loading...</div>\r\n      )}\r\n\r\n      <main>\r\n        <Outlet />\r\n      </main>\r\n    </div>\r\n  );\r\n}\r\n```\r\n> \ud83e\udde0 **`useNavigation` is a hook that gives you info about the current navigation process (loading/submitting), useful for building better UX like loaders, progress bars, or disabled buttons during navigation.**\r\n\r\n\r\n### 404 not found, where can use custom design using:\r\n```jsx\r\n  {\r\n    path: \"*\",\r\n    element: <p> 404 not found, go somewhere else bro..</p>\r\n  }\r\n```"
            }
        ]
    },
    "3": {
        "title": "React Dynamic Routes",
        "content": "## Fetching dynamic data\r\n\r\n## **Option 1: Pass full product data via state**\r\n\r\nIn `ProductDemoHome`:\r\n\r\n```jsx\r\n<button \r\n  onClick={() => navigate(`productsDemo/${item.id}`, { state: item })}\r\n>\r\n  {item.title}\r\n</button>\r\n```\r\n\r\nIn `ProductDemo`:\r\n\r\n```jsx\r\nimport { useLocation } from \"react-router\";\r\n\r\nconst ProductDemo = () => {\r\n  const { state: product } = useLocation();\r\n\r\n  return (\r\n    <div>\r\n      <h2>Product Details Page</h2>\r\n      {product ? (\r\n        <div>\r\n          <p><strong>Title:</strong> {product.title}</p>\r\n          <p><strong>Description:</strong> {product.description}</p>\r\n        </div>\r\n      ) : (\r\n        <p>Product not found!</p>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n```\r\n\r\n\u2705 **Pros:** Simple for small apps, no extra loader needed.\r\n\r\n---\r\n\r\n## **Option 2: Use a loader for the detail page**\r\n\r\nIn your route:\r\n\r\n```js\r\n{\r\n  path: 'productsDemo/:productDemoID',\r\n  Component: ProductDemo,\r\n  loader: async ({ params }) => {\r\n    const res = await fetch('/product.json');\r\n    const data = await res.json();\r\n    return data.find(p => p.id === parseInt(params.productDemoID));\r\n  }\r\n}\r\n```\r\n\r\nIn `ProductDemo`:\r\n\r\n```jsx\r\nimport { useLoaderData } from \"react-router\";\r\n\r\nconst ProductDemo = () => {\r\n  const product = useLoaderData();\r\n\r\n  return (\r\n    <div>\r\n      <h2>Product Details Page</h2>\r\n      <p><strong>Title:</strong> {product.title}</p>\r\n      <p><strong>Description:</strong> {product.description}</p>\r\n    </div>\r\n  );\r\n};\r\n```\r\n\r\n\u2705 **Pros:** Cleaner, works with refresh/reload because data is fetched per route.\r\n\r\n\ud83d\udca1 **Summary:**\r\n\r\n* Use **state via `navigate`** for fast navigation without refetch.\r\n* Use **loader** on detail route if you want proper URL-based fetching and refresh support.\r\n\r\n",
        "subsections": [
            {
                "title": "Multiple way of fetching data",
                "content": "# 1. use loaderdata\r\n```jsx\r\n            {\r\n                path: 'products',\r\n                loader: () => fetch('/product.json'),\r\n                Component: Product\r\n            },\r\n```\r\nand \r\n```jsx\r\n    const data = useLoaderData()\r\n```\r\n\r\ntbe dynamic route ar jonno\r\n```jsx\r\nloader: ({ params }) => {\r\n  return fetch(\"/products.json\")\r\n    .then(res => res.json())\r\n    .then(data => data.find(p => p.id === parseInt(params.productId)));\r\n}\r\n``` \r\neita use kora jete pare\r\n\r\n# 2. useEffect()\r\n```jsx\r\n            {\r\n                path: 'products',\r\n                Component: Product\r\n            },\r\n```\r\nand\r\n```jsx\r\n    const [data, setData] = useState(null)\r\n    useEffect(()=>{\r\n        fetch('/product.json')\r\n        .then(res => res.json())\r\n        .then(json => setData(json))\r\n    },[])\r\n```\r\n"
            },
            {
                "title": "Issues:",
                "content": "## issue 1. Always use callback function after loader:\r\nlike this: loader: () => fetch(...)\r\n\r\n\r\n##  issue 2. \r\nIn code, the navigation was written as:\r\n\r\n```jsx\r\nnavigate(`productsDemo/${item.id}`)\r\n```\r\n\r\n* This **doesn\u2019t start with a `/`**, so React Router treats it as a **relative path**.\r\n* From `/ProductDemoHome`, it tries to go to:\r\n\r\n```\r\n/ProductDemoHome/productsDemo/1\r\n```\r\n\r\n* But your route is defined as a **top-level route**:\r\n\r\n```js\r\n{\r\n  path: 'productsDemo/:productDemoID',\r\n  Component: ProductDemo\r\n}\r\n```\r\n\r\n* Result: **the route doesn\u2019t match**, so navigation fails or shows a blank page.\r\n\r\n---\r\n\r\n## **Solution**\r\n\r\nUse an **absolute path** starting with `/`:\r\n\r\n```jsx\r\n<button onClick={() => navigate(`/productsDemo/${item.id}`)}>\r\n  {item.title}\r\n</button>\r\n```\r\n\r\n* Now it navigates to `/productsDemo/1` correctly, matching your route.\r\n\r\n---\r\n\r\n## **Explanation**\r\n\r\nIn React Router:\r\n\r\n* **Absolute paths (`/`)** start from the root of the app and match top-level routes.\r\n* **Relative paths (no `/`)** are appended to the current route, which only works for nested routes.\r\n\r\nSince `productsDemo/:productDemoID` is a **top-level route**, the navigation must be **absolute**. Otherwise, React Router will look for the route relative to the current page, causing it to fail.\r\n\r\n---\r\n\r\nIf you want, I can also make a **tiny code diagram showing absolute vs relative navigation paths**, which makes it super easy to remember for beginners.\r\n\r\n\r\n## Issue 3: \r\nDynamic routing to sent the object use state, and pass the object: useLocation to state the object and fetching all the data, but:\r\nThe issue occurs because React Router\u2019s state is stored only in memory. When navigating via a button using navigate('/productsDemo/2', { state: item }), the target component can access the product data through useLocation(), so it works correctly. However, if the user directly types the URL (e.g., /productsDemo/2) in the browser, the state does not exist, and useLocation().state is undefined, causing the component to display \u201cNot found!\u201d. To fix this, the component should fetch the product data using the URL parameter (useParams) or a loader, ensuring that the product details are available even when accessed via direct URL.\r\n\r\n\r\n## Issue 4 : useLocation issue:\r\nReact Router Dynamic Route Example with `state` and URL Parameters\r\n\r\n#### 1. Routes Setup\r\n\r\n```js\r\n{\r\n    path: 'ProductDemoHome',\r\n    Component: ProductDemoHome,\r\n    loader: () => fetch('/product.json')\r\n},\r\n{\r\n    path: 'productsDemo/:productDemoID',\r\n    Component: ProductDemo\r\n}\r\n```\r\n\r\n* `ProductDemoHome` loads a list of products from a local JSON file (`product.json`) using a loader.\r\n* `productsDemo/:productDemoID` is a dynamic route for viewing individual product details.\r\n\r\n---\r\n\r\n#### 2. ProductDemoHome Component\r\n\r\n```js\r\nimport { useLoaderData, useNavigate } from \"react-router\"\r\n\r\nconst ProductDemoHome = () => {\r\n    const product = useLoaderData()\r\n    const navigate = useNavigate()\r\n\r\n    return (\r\n        <div>\r\n            <h2>Product list</h2>\r\n            <ul className=\"text-red-700 font-bold\">\r\n                {product.map(item => (\r\n                    <li key={item.id}>\r\n                        <button onClick={() => navigate(`/productsDemo/${item.id}`, { state: item })}>\r\n                            {item.title}\r\n                        </button>\r\n                    </li>\r\n                ))}\r\n            </ul>\r\n        </div>\r\n    )\r\n}\r\nexport default ProductDemoHome\r\n```\r\n\r\n* Displays a list of products.\r\n* Clicking a product button navigates to the dynamic route and passes the product data via React Router `state`.\r\n\r\n---\r\n\r\n#### 3. ProductDemo Component\r\n\r\n```js\r\nimport { useLocation, useParams } from \"react-router\"\r\n\r\nconst ProductDemo = () => {\r\n    const { state: product } = useLocation()\r\n\r\n    if (!product) {\r\n        return <p>Not found!</p>\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <h2>Product Details Page</h2>\r\n            <div>\r\n                <p>You are viewing Product ID: <strong>{product.id}</strong></p>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\nexport default ProductDemo\r\n```\r\n\r\n* Accesses the product data passed via `state`.\r\n* Displays a \"Not found!\" message if `state` is missing.\r\n\r\n#### issue: \r\nThe issue occurs because React Router\u2019s `state` is **stored only in memory**. When navigating via a button using `navigate('/productsDemo/2', { state: item })`, the target component can access the product data through `useLocation()`, so it works correctly. However, if the user **directly types the URL** (e.g., `/productsDemo/2`) in the browser, the state does not exist, and `useLocation().state` is `undefined`, causing the component to display \u201cNot found!\u201d. To fix this, the component should **fetch the product data using the URL parameter** (`useParams`) or a loader, ensuring that the product details are available even when accessed via direct URL.\r\n\r\n\r\n\r\nSince you currently **only have `productDemoID` from `useParams()`**, you also need access to your full product data to find the correct item.\r\n\r\nThe simplest way **without adding loaders or state** is to **fetch `/product.json` again** in the detail component and then filter for the selected product.\r\n\r\nHere\u2019s how you can do it:\r\n\r\n```jsx\r\nimport { useEffect, useState } from \"react\"\r\nimport { useLocation, useParams } from \"react-router\"\r\nimport { HashLoader } from \"react-spinners\"\r\n\r\nconst ProductDemo = () =>{\r\n    const {productDemoID} = useParams()\r\n    // const{state: product} = useLocation()\r\n    const [product, setProduct] = useState(null)\r\n    const [loading, setLoading] = useState(false)\r\n\r\n    useEffect(()=>{\r\n        setLoading(true)\r\n        fetch('/product.json')\r\n        .then(res => res.json())\r\n        .then(data => {\r\n            const found = data?.find(p=> p.id === parseInt(productDemoID))\r\n            setProduct(found)\r\n            setTimeout(()=> {\r\n                setLoading(false)\r\n            }, 2000)\r\n            \r\n        })\r\n    }, [productDemoID])\r\n\r\n    if(loading){\r\n        return <p> <HashLoader color=\"red\"></HashLoader></p>\r\n    }\r\n\r\n    if(!product){\r\n        return <p>Not found!</p>\r\n    }\r\n    return(\r\n        <div>\r\n            <h2>Product Details Page</h2>\r\n            <div>\r\n                <p>You are viewing Product ID: <strong>{product.id}</strong></p>\r\n                <p>Company Name: {product.companyName}</p>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\nexport default ProductDemo\r\n```\r\n\r\n### \u2705 Explanation:\r\n\r\n1. `useParams()` \u2192 gives you the `productDemoID`.\r\n2. `useEffect()` \u2192 fetches all products from `/product.json`.\r\n3. `.find()` \u2192 selects the product with matching `id`.\r\n4. `useState` \u2192 stores the selected product and triggers a re-render.\r\n5. Display all product fields inside JSX.\r\n\r\n\r\n\r\n\r\n## Issue 5 : Refresh loading Issue but both works find by url typo\r\n\r\n### \ud83d\udfe6 **1\ufe0f\u20e3 First Version \u2014 Using `useLocation` + `state` (Hybrid Approach)**\r\n\r\n```jsx\r\nconst { state } = useLocation(); \r\nconst [product, setProduct] = useState(state || null);\r\nconst [loading, setLoading] = useState(!state);\r\n```\r\n\r\n#### \ud83d\udd38 **Key Characteristics**:\r\n\r\n* It **first tries to get product data from `state`** (passed through `<Link state={item}>`).\r\n* If `state` exists \u279d the product data is **instantly available**, no fetching required.\r\n* If `state` doesn\u2019t exist (e.g. user refreshed the page or typed URL manually) \u279d then it **fetches** `/product.json`.\r\n* Uses a loader with a 2-second delay to give a smooth loading effect.\r\n\r\n#### \u2705 **Advantages**:\r\n\r\n* \u2705 **Faster initial load** (no flash/loader) when navigating from the list page.\r\n* \u2705 **Still works** if user refreshes or types URL manually (because it falls back to fetch).\r\n* \u2705 Ideal for **real-world apps** (best UX).\r\n\r\n#### \u26a0\ufe0f **Drawback**:\r\n\r\n* Slightly more logic because it handles two cases (with and without state).\r\n\r\n---\r\n\r\n### \ud83d\udfe8 **2\ufe0f\u20e3 Second Version \u2014 Using Only `useParams` (Fetch Every Time)**\r\n\r\n```jsx\r\nconst [product, setProduct] = useState(null);\r\nconst [loading, setLoading] = useState(false);\r\n\r\nuseEffect(() => {\r\n  setLoading(true);\r\n  fetch('/product.json')...\r\n}, [productDemoID]);\r\n```\r\n\r\n#### \ud83d\udd38 **Key Characteristics**:\r\n\r\n* It **doesn\u2019t rely on `state` at all**.\r\n* Every time you open a product detail page \u2014 even if you navigated from the list \u2014 it **fetches from the server** again.\r\n* Loader **always shows**, even if data was just available.\r\n\r\n#### \u2705 **Advantages**:\r\n\r\n* \u2705 Simpler logic \u2014 only one code path.\r\n* \u2705 Good if you always want \u201cfresh\u201d data from server.\r\n\r\n#### \u26a0\ufe0f **Drawbacks**:\r\n\r\n* \u274c **Unnecessary extra fetch** if user already had the data from the previous page.\r\n* \u274c Always shows loader \u2192 gives a **\u201crefresh\u201d feeling** even on internal navigation.\r\n* \u274c Slightly slower UX compared to first approach.\r\n\r\n---\r\n\r\n### \ud83d\udcdd **Summary Table**\r\n\r\n| Feature                                   | 1\ufe0f\u20e3 `useLocation` + Fetch     | 2\ufe0f\u20e3 Only Fetch                   |\r\n| ----------------------------------------- | ----------------------------- | -------------------------------- |\r\n| Data available instantly after navigation | \u2705 Yes (from state)            | \u274c No, always fetch               |\r\n| Works on refresh / direct URL             | \u2705 Yes (fetch fallback)        | \u2705 Yes                            |\r\n| Loader display                            | Only if no state (on refresh) | Always shown                     |\r\n| Network usage                             | Less (reuses state)           | More (fetch every time)          |\r\n| Code complexity                           | Slightly higher               | Simpler                          |\r\n| UX (User Experience)                      | \u2705 Smooth & fast               | \u26a0\ufe0f Feels like refresh every time |\r\n\r\n---\r\n\r\n### \ud83d\udfe2 **Recommendation:**\r\n\r\nThe **first version** (state + fallback fetch) is the **better, production-style approach** \u2705\r\nIt gives you both performance and resilience.\r\n\r\nSecond version is fine for quick demos or if server data must always be latest.\r\n"
            }
        ]
    },
    "4": {
        "title": "Custom mapping or filtering in React",
        "content": "\r\n### **1\ufe0f\u20e3 Show first 2 objects only**\r\n\r\n```jsx\r\n{\r\n  // Take the first 2 items from data\r\n  data.slice(0, 2).map(item => (\r\n    <Card \r\n      key={item.id} \r\n      name={item.name}  // Example prop\r\n      size={item.size}  // Example prop\r\n    />\r\n  ))\r\n}\r\n```\r\n\r\n**Explanation for beginners:**\r\n\r\n* `slice(0, 2)` \u2192 picks items at index 0 and 1 (first two).\r\n* `map()` \u2192 goes through each picked item and renders a `<Card>`.\r\n* `key={item.id}` \u2192 helps React track items efficiently.\r\n\r\n\r\n### **2\ufe0f\u20e3 Show 2 objects with largest size**\r\n\r\n```jsx\r\n{\r\n  // Sort data by size (biggest first), then take first 2 items\r\n  [...data]                 // Copy data so original array is not changed\r\n    .sort((a, b) => b.size - a.size)\r\n    .slice(0, 2)\r\n    .map(item => (\r\n      <Card \r\n        key={item.id} \r\n        name={item.name} \r\n        size={item.size} \r\n      />\r\n    ))\r\n}\r\n```\r\n\r\n**Explanation for beginners:**\r\n\r\n* `[...data]` \u2192 makes a copy of the array to avoid changing original data.\r\n* `.sort((a, b) => b.size - a.size)` \u2192 sorts items from largest size to smallest.\r\n* `.slice(0, 2)` \u2192 takes **first two largest items**.\r\n* `.map()` \u2192 renders them as `<Card>` components.\r\n\r\n---\r\n\r\n\ud83d\udca1 **Tip:**\r\nWhenever you want a \u201csubset\u201d of your array, `.slice()` is your friend. And if you need \u201clargest or smallest,\u201d use `.sort()` before slicing.\r\n\r\n",
        "subsections": []
    }
}